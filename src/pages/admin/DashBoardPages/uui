
// import { useState } from "react";
// import { AgGridReact } from "ag-grid-react";
// import "ag-grid-community/styles/ag-grid.css";
// import { ColDef } from "ag-grid-community";
// import "ag-grid-community/styles/ag-theme-quartz.css";
// import useAdminHooks from "@/hooks/useAdminHooks";
// const DataTable = () => {
//   const { data, isFetching } = useAdminHooks("getHospital", "auth");
//   console.log(data);
//   const [colDefs] = useState<ColDef[]>([
//     { field: "fullname", editable: true, flex: 3 },
//     { field: "mobile", flex: 6 },
//     { field: "email", flex: 6 },
//     { field: "role" },
//   ]);

//   if (isFetching) {
//     return "loaing";
//   }
//   return (
//     <div className="ag-theme-quartz" style={{ height: 500 }}>
//       <AgGridReact rowData={data} columnDefs={colDefs} />
//     </div>
//   );
// };

// export default DataTable;
   {/* <div>
            <label
              htmlFor="email"
              className="block  mb-2   text-sm font-medium text-gray-900 dark:text-gray-300"
            >
              Select User
            </label>
            <Select
              onValueChange={(newValue) => {
                console.log(newValue);
              }}
            >
              <SelectTrigger className="w-[280px]">
                <SelectValue placeholder="UserList" />
              </SelectTrigger>
              <SelectContent>
                {(data as UserDataProps[]).map((ele, id) => (
                  <SelectItem key={id} value={ele._id}>
                    {ele.fullname}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div> */}













          import { useState } from "react";

const useFilterUserHooks = () => {
  const [lang, setLang] = useState<string[]>([]);
  const [plist, setPlist] = useState<string[]>([]);
  const [inputValue, setInputValue] = useState("");
  const [searchUser, setSearchUser] = useState("");
  const [searchPatient, setSearchPatient] = useState("");
  const [active, setIsActive] = useState(false);
  const [patientActive, setPatientActive] = useState(false);

  const searchUsers = (cases: string, newone: string) => {
    switch (cases) {
      case "user":
        setSearchUser(newone);
        setIsActive(true);
        break;
      case "patient":
        setSearchPatient(newone);
        setPatientActive(true);
        break;
      default:
        break;
    }
  };

  const hidebar = (cases:string) => {
    switch (cases) {
      case "user":
        if (searchUser.trim() === "") {
          setIsActive(false);
        }
        break;
      case "patient":
        if (searchPatient.trim() === "") {
          setPatientActive(false);
        }
        break;
      default:
        break;
    }
    
  };

  const Operatable = ({
    operation,
    cases,
  }: {
    operation: string[];
    cases: string;
  }) => (
    <div className="mt-4 flex gap-4">
      {[...new Set(operation)].map((ele: string, id: number) => (
        <div className="px-2 relative py-1 rounded-full linerBg" key={id}>
          <span
            onClick={() => delLanguage(cases, id)}
            className="cursor-pointer text-white bg-red-500 px-2 py-[1px] translate-y-[-11px] translate-x-3 text-sm rounded-full absolute top-0 right-0"
          >
            x
          </span>
          {ele}
        </div>
      ))}
    </div>
  );

  // const addOperation = (cases: string, newone: string) => {
  //   switch (cases) {
  //     case "patient":
  //       setPlist((prev: string[]) => [...prev, newone]);
  //       setPatientActive(true);
  //       break;
  //     case "user":
  //       setLang((prev: string[]) => [...prev, newone]);
  //       setInputValue("");
  //       break;
  //     default:
  //       console.log("Invalid case");
  //       break;
  //   }
  // };

  const addOperation = (cases: string, newone: string) => {
    const setter = cases === "patient" ? setPlist : setLang;
    const value = cases === "user" ? "" : newone;
    setter((prev: string[]) => [...prev, newone]);
    setInputValue(value);
    if (cases === "patient") setPatientActive(true);
  };
  
  const delLanguage = (cases: string, id: number) => {
    switch (cases) {
      case "user": {
        const copyLang = [...lang];
        copyLang.splice(id, 1);
        setLang(copyLang);
        break;
      }
      case "patient": {
        const copyPlist = [...plist];
        copyPlist.splice(id, 1);
        setPlist(copyPlist);
        break;
      }
      default:
        break;
    }
  };

  return {
    addOperation,
    delLanguage,
    searchUsers,
    lang,
    inputValue,
    setInputValue,
    active,
    setIsActive,
    searchUser,
    setSearchUser,
    hidebar,
    searchPatient,
    setSearchPatient,
    Operatable,
    plist,
    patientActive,
    setPatientActive,
  };
};

export default useFilterUserHooks;
